<!-- Основные фазы сборки проекта
compile
Компилирование проекта
test
Тестирование с помощью JUnit тестов
package
Создание .jar файла или war, ear в зависимости от типа проекта
integration-test
Запуск интеграционных тестов
install
Копирование .jar (war , ear) в локальный репозиторий
deploy
публикация файла в удалённый репозиторий -->


<!-- ?xml version="1.0" encoding="UTF-8"?-->
<project 	xmlns="http://maven.apache.org/POM/4.0.0"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                    http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
								<!-- The Basics -->
	<groupId>ru.apavlov</groupId> 			<!-- groupId - наименование организации или подразделения и обычно действуют такие же правила как и при именовании пакетов в Java - записывают доменное имя организации или сайта проекта.-->
	<artifactId>javaWebSrv</artifactId>  	<!-- artifactId - название проекта. -->
	<packaging>pom</packaging> 				<!-- packaging определяет какого типа файл будет создаваться как результат сборки. Возможные варианты pom, jar, war, ear  -->
	<version>1.0.0</version>
								<!-- Не используется самим мавеном, но нужна для программиста, чтобы понять, о чём этот проект -->
    <name>javaWebSrv</name> 				<!-- название проекта для человека -->
    <description>First jWSrv</description> 	<!-- Описание проекта -->
    <url>http://stepik.org</url>			<!--  сайт проекта. -->

								<!-- Версии зависимостей. -->
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<!-- <spring.version>4.3.1.RELEASE</spring.version> -->
		<jetty.version>9.2.19.v20160908</jetty.version>
	</properties>

	<modules>
		<module>L1.1</module>
	</modules>
								<!-- Зависимости - тут хранится список всех библиотек (зависимостей) которые используюся в проекте. Каждая библиотека идентифицируется также как и сам проект - тройкой groupId, artifactId, version (GAV). Объявление зависимостей заключено в тэг <dependencies>...</dependencies>.  -->
	<dependencies>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
            <groupId>org.freemarker</groupId>
            <artifactId>freemarker</artifactId>
            <version>2.3.20</version>
        </dependency>

        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>9.3.0.M0</version>
        </dependency>

        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
            <version>9.3.0.M0</version>
        </dependency>
		
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-jsp</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		
<!-- 		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupid>org.springframework</groupid>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency> -->
		
	</dependencies>
								<!-- Тэг <build> не обязательный, т. к. существуют значения по умолчанию. Этот раздел содержит информацию по самой сборке: где находятся исходные файлы, где ресурсы, какие плагины используются. -->
	<build>
	 <!--    <outputDirectory>target2</outputDirectory>	определяет, в какую директорию компилятор будет сохранять результаты компиляции - *.class файлы. Значение по умолчанию - target/classes 
        <finalName>ROOT</finalName> имя результирующего jar (war, ear..) файла с соответствующим типу расширением, который создаётся на фазе package. Значение по умолчанию — artifactId-version. 
        <sourceDirectory>src/java</sourceDirectory> определяет, откуда maven будет брать файлы исходного кода. По умолчанию это src/main/java, но вы можете определить, где это вам удобно. Директория может быть только одна (без использования специальных плагинов) 
            <resources> и вложенные в неё тэги <resource> определяют, одну или несколько директорий, где хранятся файлы ресурсов. Ресурсы в отличие от файлов исходного кода при сборке просто копируются . Директория по умолчанию src/main/resources 
                <resource>
                    <directory>${basedir}/src/java</directory>
                    <includes>
                    <include>**/*.properties</include>
                    </includes>
                </resource>
            </resources> -->
	
		<plugins>
			<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-checkstyle-plugin</artifactId>
			<version>2.17</version>
				<executions>
					<execution>
					<id>validate</id>
					<phase>validate</phase>
						<configuration>
							<configLocation>checkstyle.xml</configLocation>
							<encoding>UTF-8</encoding>
							<consoleOutput>true</consoleOutput>
							<failsOnError>true</failsOnError>
							<includeTestSourceDirectory>true</includeTestSourceDirectory>
						</configuration>
					<goals>
					<goal>check</goal>
					</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
				</configuration>
			</plugin>
			<plugin>
			
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<targetJdk>1.6</targetJdk>
					<verbose>true</verbose>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals><goal>check</goal></goals>
					</execution>
				</executions>
			</plugin> 
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>	<!-- заменен на maven-dependency-plugin -->
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<outputDirectory>${basedir}</outputDirectory>
					<finalName>server</finalName>
					<appendAssemblyId>false</appendAssemblyId>
					<archive>
						<manifest>
							<mainClass>main.Main</mainClass>
						</manifest>
					</archive>
				</configuration>
          </plugin>
		
<!-- maven-dependency-plugin собирает все зависимости в папку lib и помещает её в каталог рядом с jar-файлом.

maven-jar-plugin делает jar-файл запускаемым и указывает класс (в данном случае ru.kutepov.launcher.Launcher, его мы создадим чуть позже), который вызывается при запуске проекта. Так же данный плагин записывает в манифест ссылку на папку с библиотеками - lib, которая создана предыдущим плагином.
		<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputdirectory>${project.build.directory}/lib</outputdirectory>
              <overwritereleases>false</overwritereleases>
              <overwritesnapshots>false</overwritesnapshots>
              <overwriteifnewer>true</overwriteifnewer>
            </configuration>
          </execution>
        </executions>
		</plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-jar-plugin</artifactId>
			<configuration>
			<archive>
				<manifest>
				<addclasspath>true</addclasspath>
				<classpathprefix>lib/</classpathprefix>
				<mainclass>ru.kutepov.launcher.Launcher</mainclass>
				</manifest>
			</archive>
			</configuration>
		</plugin> -->
		
		
		</plugins>
	</build> 
  
	
</project>